actor Result{
	int result;
	Result(int n);
	void value(int n);
};
Result::Result(int n) {
	this->result = n;
}
void Result::value(int n) { 
	this->result = n; 
}

actor Add{
	int result;
	actor r;
	Add(actor *r);
	void value(int n);
};
Add::Add(actor *r) { this->result = 0; this->r = r; }
void Add::value(int n) {
	int answer = result;
	result += n;
	if (answer != 0) {
		this->r->value(result);
		delete this;
	}
}

actor Fibonacci{
	int n; 
	actor *r;
	Fibonacci(int n, actor *r);
	void next();
};
Fibonacci::Fibonacci(int n, actor *r) { this->n = n; this->r = r; }
void Fibonacci::next() {
	if (n < 2) this->r->value(n);
	else {
		Add *a = new Add(r);
		(new Fibonacci(n-1, a))->next();
		(new Fibonacci(n-2, a))->next();
	}
	delete this;
}

int main(int argc, char** argv) {
	int n = atoi(argv[1]);
	Result *res = new Result(0);
	(new Fibonacci(n, res))->next();
	delete res;
}
